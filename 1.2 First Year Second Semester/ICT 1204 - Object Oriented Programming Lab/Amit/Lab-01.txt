Problem 01: Declare a template like Box with data members: height, width, depth, a member function like volume() which will 
calculate and return the volume and a parameterized constructor to set the dimentions of boxes as specified by those parameters.
Finally print the volume 


class Box
{
	
	double height, width, depth;
	double vol;
	
	
	
	 Box (double h, double w, double d)
	{
		height=h;
		width=w;
		depth=d;
		
	}
	 
	 
	double volume()
	{
		
		vol=height*width*depth;
		return vol;
		
		
	}
	
	
}



public class costructor {

	public static void main(String[] args) {
		
		
		Box mybox1=new Box(5,4,2);
		Box mybox2=new Box(5,3,2);
		double vol;
		
		vol=mybox1.volume();
		System.out.println(vol);
		
		vol=mybox2.volume();
		System.out.println(vol);
		
		
	}

}

Output:
40.0
30.0





Problem 02:Declare a template like Box with data members: height, width, depth, two member functions like area(), volume() 
which will calculate and return the area and volume and use constructor Overloading to set the dimentions of  boxes as 
specified by those parameters. Finally print the area and volume 

class Box
{
	
	double height, width, depth;
	double volume;
	double area;
	
	
	
	Box (double h, double w)
	{
		height=h;
		width=w;
		
	}
	 
	
	 Box (double h, double w, double d)
	{
		height=h;
		width=w;
		depth=d;
		
	}
	 
	 
	 double area()
		{
			
		 area=height*width;
			return area;
			
			
		}
	 
	 double volume()
	{
		
		volume=height*width*depth;
		return volume;
		
		
	}
	
	
}


public class costructor {

	public static void main(String[] args) {
		
		
		Box mybox1=new Box(5,4,2);
		Box mybox2=new Box(5,3,2);
		Box mybox3=new Box(5,4);
		Box mybox4=new Box(5,3);
		double vol, areaB;
		
		areaB=mybox1.area();
		System.out.println(areaB);
		
		areaB=mybox2.area();
		System.out.println(areaB);
		
		vol=mybox1.volume();
		System.out.println(vol);
		
		vol=mybox2.volume();
		System.out.println(vol);
		
		
	}

}

Output:
20.0
15.0
40.0
30.0

Problem 03:Declare a template like StudentData with data members: stuID, stuName, stuAge, 
three member functions like getStuID(), getStuName(), getStuAge()
Use Constructor Overloading and print the following sample output:

Student Name is: Mubtasim
Student Age is: 12
Student ID is: 100
Student Name is: Chaitanya
Student Age is: 25
Student ID is: 555

class StudentData
{
    int stuID;
    String stuName;
    int stuAge;
    
   StudentData()
   {
       //Default constructor
       stuID = 100;
       stuName = "Mubtasim";
       stuAge = 12;
   }
   
   StudentData(int num1, String str, int num2)
   {
       //Parameterized constructor
       stuID = num1;
       stuName = str;
       stuAge = num2;
   }
   //Getter and setter methods
   public int getStuID() {
	   
	   int stID = stuID;
       return stID;
   }
  
   public String getStuName() {
	   String stName = stuName;
       return stName;
   }
   
   public int getStuAge() {
	   int stAge = stuAge;
       return stAge;
   }
   

   public static void main(String args[])
   {
       //This object creation would call the default constructor
       StudentData myobj = new StudentData();
       System.out.println("Student Name is: "+myobj.getStuName());
       System.out.println("Student Age is: "+myobj.getStuAge());
       System.out.println("Student ID is: "+myobj.getStuID());

       /*This object creation would call the parameterized
        * constructor StudentData(int, String, int)*/
       StudentData myobj2 = new StudentData(555, "Chaitanya", 25);
       System.out.println("Student Name is: "+myobj2.getStuName());
       System.out.println("Student Age is: "+myobj2.getStuAge());
       System.out.println("Student ID is: "+myobj2.getStuID()); 
  }
}

Output:

Student Name is: Mubtasim
Student Age is: 12
Student ID is: 100
Student Name is: Chaitanya
Student Age is: 25
Student ID is: 555



Problem 04: Default Overloading
class StudentData
{
    int stuID;
    String stuName;
    int stuAge;
    
   StudentData()
   {
       //Default constructor
       stuID = 100;
       stuName = "Mubtasim";
       stuAge = 12;
   }
   
   
   //Getter and setter methods
   public int getStuID() {
	   
	   int stID = stuID;
       return stID;
   }
  
   public String getStuName() {
	   String stName = stuName;
       return stName;
   }
   
   public int getStuAge() {
	   int stAge = stuAge;
       return stAge;
   }
   

   public static void main(String args[])
   {
       //This object creation would call the default constructor
       StudentData myobj = new StudentData();
       System.out.println("Student Name is: "+myobj.getStuName());
       System.out.println("Student Age is: "+myobj.getStuAge());
       System.out.println("Student ID is: "+myobj.getStuID());

       
  }
}


Output:
Student Name is: Mubtasim
Student Age is: 12
Student ID is: 100


